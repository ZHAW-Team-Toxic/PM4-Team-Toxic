buildscript {
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {
    classpath "com.badlogicgames.gdx:gdx-tools:$gdxVersion"
  }
}

plugins {
  id 'java'
  id "jacoco"
  id "org.sonarqube" version "6.0.1.5171"
  id "com.diffplug.spotless" version "7.0.2"
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}



sonar {
  properties {
    property "sonar.projectKey", "ZHAW-Team-Toxic_PM4-Team-Toxic"
    property "sonar.organization", "zhaw-team-toxic"
    property "sonar.host.url", "https://sonarcloud.io"
  }
}

project(":lwjgl3") {
  sonar {
    skipProject = true
  }
}

configure(subprojects) {
  apply plugin: 'java-library'
  apply plugin: "jacoco"

  sourceCompatibility = 21

  dependencies {
    // For main sources
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    // For test sources
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    testImplementation("org.junit.jupiter:junit-jupiter:5.11.3")
    testImplementation 'org.mockito:mockito-core:5.5.0'
    testImplementation 'org.mockito:mockito-inline:5.2.0'
    testImplementation 'org.mockito:mockito-junit-jupiter:5.5.0'
    testImplementation "com.badlogicgames.gdx:gdx-backend-headless:$gdxVersion"
    testImplementation "com.badlogicgames.gdx:gdx:$gdxVersion"
    testImplementation "com.badlogicgames.gdx:gdx-platform:$gdxVersion:natives-desktop"
  }

  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }

  test {
    outputs.upToDateWhen { false }
    useJUnitPlatform()
    finalizedBy jacocoTestReport
    systemProperty("junit.jupiter.conditions.deactivate", "*")
    systemProperty("junit.jupiter.extensions.autodetection.enabled", true)
    systemProperty("junit.jupiter.testinstance.lifecycle.default", "per_class")
  }

  jacocoTestReport {
    dependsOn test
    reports {
      xml.required = true
    }
  }

  sourceSets {
    test {
      java.srcDirs = ["src/test/java"]
      resources {
        srcDir '../assets'  // Point to the external assets directory
      }
    }
  }
}


version = project.hasProperty('version') ? project.getProperty('version') : '1.0.0'

subprojects {
  version = project.version
  ext.appName = 'Frontier'
  repositories {
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
  sonar {
    properties {
       property "sonar.sources", "src/main/java"
       property "sonar.tests", "src/test/java"
       property "sonar.exclusions", "src/test/java"
    }
  }

  apply plugin: 'com.diffplug.spotless'

  spotless {
    ratchetFrom 'origin/main'
    format 'misc', {
      target '*.gradle', '.gitattributes', '.gitignore'

      trimTrailingWhitespace()
      leadingTabsToSpaces()
      endWithNewline()
    }
    java {
      removeUnusedImports()
      prettier(['prettier': '3.0.3', 'prettier-plugin-java': '2.3.0'])
        .config(['parser': 'java',
                'tabWidth': 4,
                'printWidth': 100,
                'plugins': ['prettier-plugin-java']
                ])
      formatAnnotations()
    }
  }
}

eclipse.project.name = 'Frontier' + '-parent'
